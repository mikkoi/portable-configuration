set encoding=utf-8
scriptencoding utf-8
set fileencoding=utf-8
set termencoding=utf-8

if debug_mikko
   echom 'Entering ~/portable-configuration/.vimrc_after'
endif

" All indented stuff below is about Vim addon Manager installation and setup.
" vint: -ProhibitSetNoCompatible
        set nocompatible | filetype indent plugin on | syn on
" vint: +ProhibitSetNoCompatible

        fun! EnsureVamIsOnDisk(plugin_root_dir)
          " windows users may want to use http://mawercer.de/~marc/vam/index.php
          " to fetch VAM, VAM-known-repositories and the listed plugins
          " without having to install curl, 7-zip and git tools first
          " -> BUG [4] (git-less installation)
          let vam_autoload_dir = a:plugin_root_dir.'/vim-addon-manager/autoload'
          if isdirectory(vam_autoload_dir)
            return 1
          else
            if 1 == confirm('Clone VAM into '.a:plugin_root_dir.'?',"&Y\n&N")
              " I'm sorry having to add this reminder. Eventually it'll pay off.
              call confirm('Remind yourself that most plugins ship with '.
                          \'documentation (README*, doc/*.txt). It is your '.
                          \"first source of knowledge. If you can't find ".
                          \"the info you're looking for in reasonable ".
                          \'time ask maintainers to improve documentation')
              call mkdir(a:plugin_root_dir, 'p')
              execute '!git clone --depth=1 git://github.com/MarcWeber/vim-addon-manager '.
                          \       shellescape(a:plugin_root_dir, 1).'/vim-addon-manager'
              " VAM runs helptags automatically when you install or update 
              " plugins
              exec 'helptags '.fnameescape(a:plugin_root_dir.'/vim-addon-manager/doc')
            endif
            return isdirectory(vam_autoload_dir)
          endif
        endfun

        fun! SetupVAM()
          " Set advanced options like this:
          " let g:vim_addon_manager = {}
          " let g:vim_addon_manager.key = value
          "     Pipe all output into a buffer which gets written to disk
          " let g:vim_addon_manager.log_to_buf =1

          " Example: drop git sources unless git is in PATH. Same plugins can
          " be installed from www.vim.org. Lookup MergeSources to get more control
          " let g:vim_addon_manager.drop_git_sources = !executable('git')
          " let g:vim_addon_manager.debug_activation = 1

          " VAM install location:
          let c = get(g:, 'vim_addon_manager', {})
          let g:vim_addon_manager = c
          let c.plugin_root_dir = expand('$HOME/.vim/vim-addons', 1)
          if !EnsureVamIsOnDisk(c.plugin_root_dir)
            echohl ErrorMsg | echomsg 'No VAM found!' | echohl NONE
            return
          endif
          let &rtp.=(empty(&rtp)?'':',').c.plugin_root_dir.'/vim-addon-manager'

          " Tell VAM which plugins to fetch & load:
          call vam#ActivateAddons([], {'auto_install' : 0})
          " sample: call vam#ActivateAddons(['pluginA','pluginB', ...], {'auto_install' : 0})
          " Also See "plugins-per-line" below

          " Addons are put into plugin_root_dir/plugin-name directory
          " unless those directories exist. Then they are activated.
          " Activating means adding addon dirs to rtp and do some additional
          " magic

          " How to find addon names?
          " - look up source from pool
          " - (<c-x><c-p> complete plugin names):
          " You can use name rewritings to point to sources:
          "    ..ActivateAddons(["github:foo", .. => github://foo/vim-addon-foo
          "    ..ActivateAddons(["github:user/repo", .. => github://user/repo
          " Also see section "2.2. names of addons and addon sources" in VAM's documentation
        endfun
        call SetupVAM()
        " experimental [E1]: load plugins lazily depending on filetype, See
        " NOTES
        " experimental [E2]: run after gui has been started (gvim) [3]
        " option1:  au VimEnter * call SetupVAM()
        " option2:  au GUIEnter * call SetupVAM()
        " See BUGS sections below [*]
        " Vim 7.0 users see BUGS section [3]

" Sensible (common settings for Vim)
" call vam#ActivateAddons(['github:tpope/vim-sensible'], {'auto_install' : 0})

" Software capslock
call vam#ActivateAddons(['github:tpope/vim-capslock'], {'auto_install' : 0})
imap <C-L>     <Plug>CapsLockToggle


" Read additional vimrc files.
set exrc
" Be more secure when doing int.
set secure

syntax on
set number

set statusline=%m%<%F%h%r%h%w%y\ %{&ff}\ %=\ col:%c%V\ ascii:%b\ pos:%o\ line:%l\/%L\ %P
set laststatus=2
set backspace=2

set pastetoggle=<f5>

set wildmode=longest,list,full
set wildmenu

set colorcolumn=80
highlight ColorColumn ctermbg=yellow

" highlight matching braces
set showmatch 

"set foldlevelstart=20 
"Maybe with VimFold4C

"define :Tidy command to run perltidy on visual selection || entire buffer"
command -range=% -nargs=* PerlTidy <line1>,<line2>!perltidy

"run :Tidy on entire buffer and return cursor to (approximate) original position"
fun Tidy()
    let l = line(".")
    let c = col(".")
    :PerlTidy
    call cursor(l, c)
endfun


" VIM Configuration File
" " Description: Optimized for C/C++ development, but useful also for other
" things.
" " Author: Gerhard Gappmeier
" "
"  
"  " disable vi compatibility (emulation of old bugs)
"  set nocompatible
"  " use indentation of previous line
"  set autoindent
"  " use intelligent indentation for C
"  set smartindent
"  " configure tabwidth and insert spaces instead of tabs
"  set tabstop=4 " tab width is 4 spaces
"  set shiftwidth=4 " indent also with 4 spaces
"  set expandtab " expand tabs to spaces
"  " wrap lines at 120 chars. 80 is somewaht antiquated with nowadays
"  displays.
"  set textwidth=120
"  " turn syntax highlighting on
"  set t_Co=256
"  syntax on
"  " colorscheme wombat256
"  " turn line numbers on
"  set number
"  " highlight matching braces
"  set showmatch
"  " intelligent comments
"  set comments=sl:/*,mb:\ *,elx:\ */
"   
"   " Install OmniCppComplete like described on
"   http://vim.wikia.com/wiki/C++_code_completion
"   " This offers intelligent C++ completion when typing ‘.’ ‘->’ or <C-o>
"   " Load standard tag files
"   set tags+=~/.vim/tags/cpp
"   set tags+=~/.vim/tags/gl
"   set tags+=~/.vim/tags/sdl
"   set tags+=~/.vim/tags/qt4
"    
"    " Install DoxygenToolkit from
"    http://www.vim.org/scripts/script.php?script_id=987
"    let g:DoxygenToolkit_authorName="John Doe <john@doe.com>"
"     
"     " Enhanced keyboard mappings
"     "
"     " in normal mode F2 will save the file
"     nmap <F2> :w<CR>
"     " in insert mode F2 will exit insert, save, enters insert again
"     imap <F2> <ESC>:w<CR>i
"     " switch between header/source with F4
"     map <F4> :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>
"     " recreate tags file with F5
"     map <F5> :!ctags -R –c++-kinds=+p –fields=+iaS –extra=+q .<CR>
"     " create doxygen comment
"     map <F6> :Dox<CR>
"     " build using makeprg with <F7>
"     map <F7> :make<CR>
"     " build using makeprg with <S-F7>
"     map <S-F7> :make clean all<CR>
"     " goto definition with F12
"     map <F12> <C-]>
"     " in diff mode we use the spell check keys for merging
"     if &diff
"     ” diff settings
"     map <M-Down> ]c
"     map <M-Up> [c
"     map <M-Left> do
"     map <M-Right> dp
"     map <F9> :new<CR>:read !svn diff<CR>:set syntax=diff
"     buftype=nofile<CR>gg
"     else
"     " spell settings
"     :setlocal spell spelllang=en
"     " set the spellfile - folders must exist
"     set spellfile=~/.vim/spellfile.add
"     map <M-Down> ]s
"     map <M-Up> [s
"     endif 

" END OF:
" VIM Configuration File
" " " Description: Optimized for C/C++ development, but useful also for other





   
"let &path.="/home/mikko/emediate/eas.bo,~/emediate/eas/booking,/usr/include/AL,"


" Save by F3 in insert mode.
inoremap <F3> <c-o>:w<cr>


" LH-CPP ETC.
"call vam#ActivateAddons(['lh-cpp'], {'auto_install' : 0})
"call vam#ActivateAddons(['build-tools-wrapper'], {'auto_install' : 0})
"https://code.google.com/p/lh-vim/wiki/BTW


" Nerd Tree
call vam#ActivateAddons(['github:scrooloose/nerdtree.git'], {'auto_install' : 0})

" Nerd Commenter
" call vam#ActivateAddons(['nerdcommenter'], {'auto_install' : 0})

" TComment
call vam#ActivateAddons(['github:tomtom/tcomment_vim'], {'auto_install' : 0})

" CMake.vim
" call vam#ActivateAddons(['github:jalcine/cmake.vim'], {'auto_install' : 0})

"Another CMake with file list bar
" call vam#ActivateAddons(['vim-cmake-project'], {'auto_install' : 0})

"Rename a file in the current directory
call vam#ActivateAddons(['Rename2'], {'auto_install' : 0})

"Save a file and create its parent directories at the same time
call vam#ActivateAddons(['github:duggiefresh/vim-easydir'], {'auto_install' : 0})

"vim-signature is a plugin to place, toggle and display marks.
call vam#ActivateAddons(['github:kshenoy/vim-signature'], {'auto_install' : 0})

"Format your code with only one button press! This plugin makes use of
"external formatprograms to achieve the best result.
" call vam#ActivateAddons(['github:Chiel92/vim-autoformat'], {'auto_install' : 0})

"Polyglot, many programming languages supported automatically
call vam#ActivateAddons(['github:sheerun/vim-polyglot'], { 'auto_install' : 0})
"Polyglot submodule prefs:
"Highlighting of class scope if disabled by default. To enable set
let g:cpp_class_scope_highlight = 1
"Highlighting of template functions is enabled by setting
"Note: C++ template syntax is notoriously difficult to parse, so don't expect this feature to be perfect.
let g:cpp_experimental_template_highlight = 1




"Vim Git interface
call vam#ActivateAddons(['github:tpope/vim-fugitive'], { 'auto_install' : 0})

"Changing stuff around something
call vam#ActivateAddons(['github:tpope/vim-surround'], { 'auto_install' : 0})

"Change code right in the quickfix window 
call vam#ActivateAddons(['github:stefandtw/quickfix-reflector.vim'], { 'auto_install' : 0})

" Highlight variables in Perl
call vam#ActivateAddons(['github:pjcj/vim-hl-var'], { 'auto_install' : 0})
" The variables will be highlighted after you have not performed any action
" for a certain length of time. That time is controlled by the updatetime
" setting.
set updatetime=350
" You can customise the highlighting applied by this plugin by using the
" hlvarhl global variable. This can be set in your .vimrc file:
" let g:hlvarhl="ctermbg=black ctermfg=red guifg=#ff0000 guibg=#000000 gui=bold"
let g:hlvarhl='ctermfg=red guifg=#ff0000 guibg=#000000 gui=bold'
" If you don't want the variable under cursor to be highlighted, you can disable it by setting variable g:hlvarcurrent to 1.
" let g:hlvarcurrent = 1

" Keep case when replacing
call vam#ActivateAddons(['keepcase'], {'auto_install' : 0})

call vam#ActivateAddons(['github:altercation/vim-colors-solarized'], {'auto_install' : 0})
syntax enable
if has('gui_running')
	set background=light
	colorscheme solarized
else
	set background=light
	set t_Co=16
	colorscheme solarized
endif



"SYNTASTIC
" call vam#ActivateAddons(['Syntastic'], {'force_loading_plugins_now': 1})
call vam#ActivateAddons(['Syntastic'], {'auto_install' : 0})
"Enable this option to tell syntastic to always stick any detected errors into the |location-list|: >
let g:syntastic_always_populate_loc_list = 1
"Use this option to tell syntastic to automatically open and/or close the |location-list| (see |syntastic-error-window|).
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

"Use this option to tell syntastic whether to use the |:sign| interface to mark syntax errors: >
let g:syntastic_enable_signs=1
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*




"SYNTASTIC Vim checker
call vam#ActivateAddons(['github:todesking/vint-syntastic'], {'auto_install' : 0})
" you need: sudo pip install vim-vint
let g:syntastic_vim_vint_args = '--style-problem --color --style'

call vam#ActivateAddons(['github:ynkdir/vim-vimlparser'], {'auto_install' : 0})
call vam#ActivateAddons(['github:syngan/vim-vimlint'], {'auto_install' : 0})

let g:syntastic_vim_checkers = ['vimlint','vint']
" let g:syntastic_vim_checkers = ['vimlint']

" SYNTASTIC Perl checker
" TODO
let g:syntastic_enable_perl_checker = 1
let g:syntastic_perl_checkers = [ 'perl', 'perlcritic' ]
let g:syntastic_perl_lib_path = [ './lib', './lib/auto', '/home/mikko/perl5/lib/perl5' ]

" error threshold: policy violations with a severity above this value are highlighted as errors, the others are warnings (integer; default: 5)
let g:syntastic_perl_perlcritic_thres = 1
" command line options to pass to perlcritic  (string; default: empty)
let g:syntastic_perl_perlcritic_args = '--brutal --exclude Modules::RequireVersionVar --exclude CodeLayout::RequireTidyCode'



" Doesn't work:
" call vam#ActivateAddons(['github:MarcWeber/vim-addon-local-vimrc'])
" let g:local_vimrc = { 'names':['.vimrc', '_vimrc_local.vim'],'hash_fun': ['LVRHashOfFile'] }
" let g:local_vimrc = { 'names':['_vimrc_local.vim'],'hash_fun': ['LVRHashOfFile'] }
" let g:local_vimrc = {'cache_file': '/home/mikko/.vim_local_rc_cache', 'hash_fun': 'LVRHashOfFile', 'implementations': ['sha512sum', 'sha256sum', 'sha1sum', 'md5sum', 'viml'], 'names': ['.vimrc'], 'resource_on_cwd_change': 1}


" Needed for local_vimrc
call vam#ActivateAddons(['github:LucHermitte/lh-vim-lib'], {'auto_install' : 0})

"  Read file _vimrc_local.vim if present.
" call vam#ActivateAddons(['github:vim-scripts/local_vimrc.vim'], {'auto_install' : 0})
" Newer version:
call vam#ActivateAddons(['github:LucHermitte/local_vimrc'], {'auto_install' : 0})
ActivateAddons local_vimrc
" TODO Change local_vimrc.vim to e.g. https://github.com/embear/vim-localvimrc ???

" Remove $HOME from the asklist,
" call filter(g:local_vimrc_options, 'v:val != $HOME')
" call lh#path#munge(g:local_vimrc_options.whitelist, $HOME.'/emediate')
" let g:local_vimrc_options = {'blacklist': ['/home/mikko/.vim/.*', '/home'], 'asklist': ['/home/mikko'], 'sandboxlist': [], 'whitelist': ['/home/mikko/.vim', '/home/mikko/emediate']}

"  perl omnicompletion for vim (including base class function compleltions .. etc) 
" call vam#ActivateAddons(['github:c9s/perlomni.vim'], {'auto_install' : 0})

" echo 'End: ~/portable-configuration/.vimrc_after'


set tabstop=3
set expandtab
set shiftwidth=3
set autoindent
set smartindent
set cindent


" call vam#ActivateAddons(['github:dagfinnr/perl-extract-method'], { 'auto_install' : 0})






" ALL YOUCOMPLETEME STUFF HERE!

" https://github.com/cwoac/nvim
" http://notational.net/
" if has('nvim')
"     runtime! python_setup.vim
" endif
" Plug 'Valloric/YouCompleteMe', { 'do': './install.sh --clang-completer' }
" Plug 'SirVer/ultisnips'
" Plug 'ladislas/vim-snippets'


call vam#ActivateAddons(['github:Valloric/YouCompleteMe'], { 'auto_install' : 0})

" call vam#ActivateAddons(['github:rdnetto/YCM-Generator'], { 'auto_install' : 0})


"
"" YouCompleteMe options

" E764: Option 'omnifunc' is not set
" If this happens for Java files, you forgot to put this in your .vimrc: 
" let g:EclimCompletionMethod = 'omnifunc'

"
"
"let g:ycm_register_as_syntastic_checker = 1 "default 1
"let g:Show_diagnostics_ui = 1 "default 1
"
"will put icons in Vim's gutter on lines that have a diagnostic set.
"Turning this off will also turn off the YcmErrorLine and YcmWarningLine
"highlighting
" let g:ycm_enable_diagnostic_signs = 1
" let g:ycm_enable_diagnostic_highlighting = 0
" let g:ycm_always_populate_location_list = 1 "default 0
" let g:ycm_open_loclist_on_ycm_diags = 1 "default 1


let g:ycm_complete_in_strings = 1 "default 1
let g:ycm_collect_identifiers_from_tags_files = 0 "default 0
let g:ycm_path_to_python_interpreter = '' "default ''


let g:ycm_server_use_vim_stdout = 0 "default 0 (logging to console)
let g:ycm_server_log_level = 'info' "default info

"where to search for .ycm_extra_conf.py if not found
" let g:ycm_global_ycm_extra_conf = '~/emediate/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0


let g:ycm_goto_buffer_command = 'same-buffer' "[ 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab' ]
let g:ycm_filetype_whitelist = { '*': 1 }
let g:ycm_key_invoke_completion = '<C-Space>'


nnoremap <F11> :YcmForceCompileAndDiagnostics <CR>

" Track the engine.
call vam#ActivateAddons(['github:SirVer/ultisnips'], {'auto_install' : 0})
" " Snippets are separated from the engine. Add this if you want them:
call vam#ActivateAddons(['github:honza/vim-snippets'], {'auto_install' : 0})
"
" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsExpandTrigger='<c-å>'
" let g:UltiSnipsJumpForwardTrigger='<c-b>'
" let g:UltiSnipsJumpBackwardTrigger='<c-z>'

" " If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit='vertical'


" Ladislav's setup:
" YouCompleteMe setup
" let g:ycm_autoclose_preview_window_after_completion = 1
" let g:ycm_filetype_blacklist={'unite': 1}
" let g:ycm_min_num_of_chars_for_completion = 1
" nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
"
" " UltiSnips setup
" let g:UltiSnipsExpandTrigger='<c-k>'
" let g:UltiSnipsJumpForwardTrigger='<c-k>'
" let g:UltiSnipsJumpBackwardTrigger='<c-s-k>'
" let g:UltiSnipsSnippetsDir=plugDir.'/vim-snippets/UltiSnips'
"

" Another solution:
" http://stackoverflow.com/questions/27390285/vim-ultisnips-not-working-with-ycm
"  I solved this problem with the following configurations:
"
"  UltiSnips:
"
"  let g:UltiSnipsSnippetsDir        = $HOME.'/.vim/UltiSnips/'
"  let g:UltiSnipsSnippetDirectories=["UltiSnips"]
"  let g:UltiSnipsExpandTrigger="<c-j>"
"  let g:UltiSnipsJumpForwardTrigger="<c-j>"
"  let g:UltiSnipsJumpBackwardTrigger="<c-k>"
"  let g:UltiSnipsListSnippets="<c-h>"
"
"  YCM:
"
"  let g:ycm_complete_in_comments = 1 
"  let g:ycm_seed_identifiers_with_syntax = 1 
"  let g:ycm_collect_identifiers_from_comments_and_strings = 1 

" call vam#ActivateAddons(['github:c9s/perlomni.vim'], {'auto_install' : 0})


" https://github.com/Valloric/YouCompleteMe/issues/36#issuecomment-15451411
" http://stackoverflow.com/questions/14896327/ultisnips-and-youcompleteme/18685821#18685821
" call vam#ActivateAddons(['github:Valloric/YouCompleteMe'], {'auto_install' : 0})
"
" let g:ycm_server_keep_logfiles = 1
" let g:ycm_server_log_level = 'debug'
" let g:ycm_path_to_python_interpreter = '/usr/bin/python'



" call vam#ActivateAddons(['github:SirVer/ultisnips'], {'auto_install' : 0})
" call vam#ActivateAddons(['github:honza/vim-snippets'], {'auto_install' : 0})
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsExpandTrigger="<c->"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsExpandTrigger = '<c-k>'
let g:UltiSnipsJumpForwardTrigger = '<c-j>'
" let g:UltiSnipsJumpBackwardTrigger = '<c-j>'
let g:UltiSnipsListSnippets = '<c-h>'
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit='vertical'

let g:UltiSnipsUsePythonVersion = 2







if debug_mikko
   echom 'Exiting ~/portable-configuration/.vimrc_after'
endif

